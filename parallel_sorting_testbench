`timescale 1ns / 1ps

module parallel_sorting_tb();

reg [15:0] p0, p1, p2, p3, p4, p5, p6, p7;
reg reset, clk, start;
wire [15:0] q0, q1, q2, q3, q4, q5, q6, q7;

parallel_sortingv dut (.p0(p0), .p1(p1), .p2(p2), .p3(p3),.p4(p4), .p5(p5), .p6(p6), .p7(p7),
.reset(reset), .clk(clk), .start(start),.q0(q0), .q1(q1), .q2(q2), .q3(q3),.q4(q4), .q5(q5), .q6(q6), .q7(q7));

always begin
    #5 clk = ~clk; // Generate clock with period 10ns
end

initial begin
    // Initialize signals
    clk = 0;
    reset = 0;
    start = 0;
    p0 = 16'd28; p1 = 16'd15; p2 = 16'd75; p3 = 16'd26;
    p4 = 16'd33; p5 = 16'd70; p6 = 16'd35; p7 = 16'd4;
 
    reset = 1;
    #10 reset = 0;
    start = 1;
    #10 start = 0;

    #200; // Wait a little longer (increase the wait time) to ensure sorting completes
    
    // Display the sorted outputs
    $display("Sorted Outputs: q0 = %d, q1 = %d, q2 = %d, q3 = %d, q4 = %d, q5 = %d, q6 = %d, q7 = %d", 
             q0, q1, q2, q3, q4, q5, q6, q7);
    
    $finish;
end

endmodule

